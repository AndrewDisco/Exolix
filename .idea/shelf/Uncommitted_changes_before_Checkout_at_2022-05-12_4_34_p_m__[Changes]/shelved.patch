Index: scratches/src/main/java/com/github/skylixgh/hello/MyApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.github.skylixgh.hello;\r\n\r\nimport net.skylix.elixor.desktop.Desktop;\r\nimport net.skylix.elixor.desktop.DesktopFrameType;\r\nimport net.skylix.elixor.desktop.DesktopSettings;\r\nimport net.skylix.elixor.desktop.animation.AnimationColor;\r\nimport net.skylix.elixor.desktop.animation.AnimationInteger;\r\nimport net.skylix.elixor.desktop.errors.WindowAlreadyRunning;\r\nimport net.skylix.elixor.desktop.errors.WindowCannotReinitialize;\r\nimport net.skylix.elixor.desktop.errors.WindowNotRunning;\r\nimport net.skylix.elixor.desktop.theme.ThemeColor;\r\nimport net.skylix.elixor.desktop.theme.presets.ThemeDark;\r\nimport net.skylix.elixor.desktop.ux.uxButton.UXButton;\r\nimport net.skylix.elixor.desktop.ux.uxButton.UXButtonSettings;\r\nimport net.skylix.elixor.desktop.ux.uxButton.UXButtonType;\r\nimport net.skylix.elixor.desktop.ux.uxComponent.UXComponent;\r\nimport net.skylix.elixor.desktop.ux.uxLabel.UXLabel;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanel;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelColumnAlignment;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelFlowDirection;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelRowAlignment;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelSettings;\r\nimport net.skylix.elixor.terminal.color.errors.InvalidHexCode;\r\nimport net.skylix.elixor.terminal.logger.Logger;\r\n\r\nimport javax.swing.*;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.URISyntaxException;\r\nimport java.util.ArrayList;\r\nimport java.util.function.Consumer;\r\n\r\npublic class MyApp {\r\n    public static class DemoTree {\r\n        public ArrayList<TreeNode> nodes = new ArrayList<TreeNode>();\r\n    }\r\n\r\n    public static class TreeNode {\r\n        public UXComponent el;\r\n\r\n        public TreeNode(UXComponent elt) {\r\n            el = elt;\r\n        }\r\n\r\n        public static TreeNode button(String text, Consumer<UXButtonSettings> mod) throws InvalidHexCode {\r\n            UXButtonSettings settings = new UXButtonSettings();\r\n            mod.accept(settings);\r\n            return new TreeNode(new UXButton(text, settings));\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws URISyntaxException, WindowAlreadyRunning, InvalidHexCode, WindowCannotReinitialize, IOException {\r\n        UXPanel panel = new UXPanel(new UXPanelSettings() {{\r\n            width = 1000;\r\n            height = 600 - 32;\r\n            rowAlignment = UXPanelRowAlignment.SPACE_BETWEEN;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n        }});\r\n\r\n        UXComponent pane = new UXComponent();\r\n        JScrollPane scroll = new JScrollPane();\r\n\r\n        scroll.setSize(1000, 600 - 32);\r\n        \r\n        for (int i = 0; i < 100; i++) {\r\n            scroll.add(new JLabel(\"Hello World\"));\r\n        }\r\n\r\n        pane.setElement(scroll);\r\n\r\n        Desktop window = new Desktop(new DesktopSettings() {{\r\n//            frameType = DesktopFrameType.HIDDEN;\r\n            onResize = (win) -> {\r\n                panel.setSize(win.getWidth(), win.getHeight() - 32);\r\n            };\r\n        }});\r\n\r\n        InputStream iht = MyApp.class.getClassLoader().getResourceAsStream(\"hello\");\r\n        String ht = iht.toString();\r\n\r\n        UXButton button1 = new UXButton(ht);\r\n        UXButton button2 = new UXButton(\"Button B\");\r\n        UXButton button3 = new UXButton(\"Button C\", new UXButtonSettings() {{ type = UXButtonType.HIGHLIGHTED; onMouseClick = (btn) -> {\r\n            Logger.infoBase(\"Clicked\");\r\n            try {\r\n                panel.add(new UXButton(\"Button D\"));\r\n            } catch (InvalidHexCode e) {\r\n                e.printStackTrace();\r\n            }\r\n        }; }});\r\n\r\n        UXComponent jbtn = new UXComponent();\r\n        jbtn.setElement(new JButton(\"Hello World\"));\r\n\r\n        int pcRam = 293213712;\r\n        UXLabel label = new UXLabel(\"App Ram Usage: - \" + pcRam + \"GB\");\r\n\r\n        UXLabel a = new UXLabel(\"Hello World\");\r\n        UXLabel b = new UXLabel(\"Hello World\");\r\n\r\n        UXPanel item1 = new UXPanel(new UXPanelSettings() {{\r\n            cornerRadius = 4;\r\n            width = 300;\r\n            height = 80;\r\n            color = theme.getThemeAttribute(\"component1\");\r\n            rowAlignment = UXPanelRowAlignment.CENTER;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n            \r\n            onMouseEnter = (p) -> {\r\n                try {\r\n                    p.setColor(new ThemeDark().getThemeAttribute(\"highlight4\"));\r\n                    a.setColor(new ThemeDark().getThemeAttribute(\"highlightText4\"));\r\n                } catch (InvalidHexCode e) {\r\n                    // TODO Auto-generated catch block\r\n                    e.printStackTrace();\r\n                }\r\n            };\r\n            \r\n            onMouseExit = (p) -> {\r\n                try {\r\n                    p.setColor(new ThemeDark().getThemeAttribute(\"component1\"));\r\n                    a.setColor(new ThemeDark().getThemeAttribute(\"text4\"));\r\n                } catch (InvalidHexCode e) {\r\n                    // TODO Auto-generated catch block\r\n                    e.printStackTrace();\r\n                }\r\n            };\r\n        }});\r\n\r\n        UXPanel item2 = new UXPanel(new UXPanelSettings() {{\r\n            cornerRadius = 4;\r\n            rowAlignment = UXPanelRowAlignment.CENTER;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n            width = 300;\r\n            height = 80;\r\n            color = theme.getThemeAttribute(\"component1\");\r\n\r\n            onMouseEnter = (p) -> {\r\n                try {\r\n                    p.setColor(new ThemeDark().getThemeAttribute(\"highlight4\"), 100);\r\n                    b.setColor(new ThemeDark().getThemeAttribute(\"highlightText4\"), 100);\r\n                } catch (InvalidHexCode e) {\r\n                    // TODO Auto-generated catch block\r\n                    e.printStackTrace();\r\n                }\r\n            };\r\n            \r\n            onMouseExit = (p) -> {\r\n                try {\r\n                    b.setColor(new ThemeDark().getThemeAttribute(\"text4\"), 100);\r\n                    p.setColor(new ThemeDark().getThemeAttribute(\"component1\"), 100);\r\n                } catch (InvalidHexCode e) {\r\n                    // TODO Auto-generated catch block\r\n                    e.printStackTrace();\r\n                }\r\n            };\r\n        }});\r\n//        panel.add(jbtn);\r\n\r\n        UXPanel stuff = new UXPanel(new UXPanelSettings() {{\r\n            width = 300;\r\n            height = (80 * 2) + 10;\r\n            flowDirection = UXPanelFlowDirection.COLUMN;\r\n            spacingY = 10;\r\n        }});\r\n\r\n        item1.add(a);\r\n        item2.add(b);\r\n\r\n        stuff.add(item1);\r\n        stuff.add(item2);\r\n\r\n        panel.add(stuff);\r\n\r\n       window.setRootElement(panel);\r\n        window.run();\r\n\r\n        // taskbar overlay\r\n        Desktop tb = new Desktop(new DesktopSettings() {{\r\n            frameType = DesktopFrameType.NONE;\r\n            alwaysOnTop = true;\r\n        }});\r\n\r\n        UXPanel rootTB = new UXPanel(new UXPanelSettings() {{\r\n            rowAlignment = UXPanelRowAlignment.CENTER;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n            width = 1920;\r\n            height = 50;\r\n            color = new ThemeColor(\"#230500\");\r\n        }});\r\n\r\n        UXButton btnTB = new UXButton(\"Stop\", new UXButtonSettings() {{\r\n            type = UXButtonType.CRITICAL;\r\n            onMouseClick = (btn) -> {\r\n                try {\r\n                    tb.stop();\r\n                } catch (WindowNotRunning e) {\r\n                    e.printStackTrace();\r\n                }\r\n            };\r\n        }});\r\n\r\n        rootTB.add(btnTB);\r\n\r\n        tb.setWidth(1920);\r\n        tb.setHeight(50);\r\n\r\n        tb.setPositionY(1080 - 50);\r\n\r\n        tb.setRootElement(rootTB);\r\n//        tb.run();\r\n\r\n        AnimationColor ac = new AnimationColor(new ThemeColor(\"#000\"), (t, c) -> {\r\n            jbtn.getSwingComponent().setBackground(c.getAwtColor());\r\n        });\r\n\r\n        jbtn.getSwingComponent().addMouseListener(new java.awt.event.MouseAdapter() {\r\n            @Override\r\n            public void mouseEntered(java.awt.event.MouseEvent e) {\r\n                try {\r\n                    ac.moveTo(new ThemeColor(\"#FFAA62\"), 0);\r\n                } catch (InvalidHexCode ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void mouseExited(java.awt.event.MouseEvent e) {\r\n                try {\r\n                    ac.moveTo(new ThemeColor(\"#000\"), 1000);\r\n                } catch (InvalidHexCode ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void mousePressed(java.awt.event.MouseEvent e) {\r\n                try {\r\n                    ac.moveTo(new ThemeColor(\"#FFFFFF\"), 1000);\r\n                } catch (InvalidHexCode ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scratches/src/main/java/com/github/skylixgh/hello/MyApp.java b/scratches/src/main/java/com/github/skylixgh/hello/MyApp.java
--- a/scratches/src/main/java/com/github/skylixgh/hello/MyApp.java	
+++ b/scratches/src/main/java/com/github/skylixgh/hello/MyApp.java	
@@ -8,6 +8,7 @@
 import net.skylix.elixor.desktop.errors.WindowAlreadyRunning;
 import net.skylix.elixor.desktop.errors.WindowCannotReinitialize;
 import net.skylix.elixor.desktop.errors.WindowNotRunning;
+import net.skylix.elixor.desktop.theme.Theme;
 import net.skylix.elixor.desktop.theme.ThemeColor;
 import net.skylix.elixor.desktop.theme.presets.ThemeDark;
 import net.skylix.elixor.desktop.ux.uxButton.UXButton;
@@ -15,11 +16,8 @@
 import net.skylix.elixor.desktop.ux.uxButton.UXButtonType;
 import net.skylix.elixor.desktop.ux.uxComponent.UXComponent;
 import net.skylix.elixor.desktop.ux.uxLabel.UXLabel;
-import net.skylix.elixor.desktop.ux.uxPanel.UXPanel;
-import net.skylix.elixor.desktop.ux.uxPanel.UXPanelColumnAlignment;
-import net.skylix.elixor.desktop.ux.uxPanel.UXPanelFlowDirection;
-import net.skylix.elixor.desktop.ux.uxPanel.UXPanelRowAlignment;
-import net.skylix.elixor.desktop.ux.uxPanel.UXPanelSettings;
+import net.skylix.elixor.desktop.ux.uxLabel.UXLabelSettings;
+import net.skylix.elixor.desktop.ux.uxPanel.*;
 import net.skylix.elixor.terminal.color.errors.InvalidHexCode;
 import net.skylix.elixor.terminal.logger.Logger;
 
@@ -31,216 +29,192 @@
 import java.util.function.Consumer;
 
 public class MyApp {
-    public static class DemoTree {
-        public ArrayList<TreeNode> nodes = new ArrayList<TreeNode>();
-    }
-
-    public static class TreeNode {
-        public UXComponent el;
-
-        public TreeNode(UXComponent elt) {
-            el = elt;
-        }
-
-        public static TreeNode button(String text, Consumer<UXButtonSettings> mod) throws InvalidHexCode {
-            UXButtonSettings settings = new UXButtonSettings();
-            mod.accept(settings);
-            return new TreeNode(new UXButton(text, settings));
-        }
-    }
+    private static Desktop win;
 
     public static void main(String[] args) throws URISyntaxException, WindowAlreadyRunning, InvalidHexCode, WindowCannotReinitialize, IOException {
-        UXPanel panel = new UXPanel(new UXPanelSettings() {{
-            width = 1000;
-            height = 600 - 32;
-            rowAlignment = UXPanelRowAlignment.SPACE_BETWEEN;
+        JFrame frame = new JFrame("Hello World");
+        JScrollPane scroll = new JScrollPane(new JTextArea());
+        frame.add(scroll);
+
+
+
+        frame.setVisible(true);
+
+//        win = new Desktop(new DesktopSettings() {{
+//
+//        }});
+//
+//        Theme theme = new ThemeDark();
+//
+//        final UXPanel root = new UXPanel(new UXPanelSettings() {{
+//            width = win.getWidth();
+//            height = win.getHeight() - 32;
+//            color = theme.getThemeAttribute("layerSolid2");
+//            flowDirection = UXPanelFlowDirection.ROW;
+//            rowAlignment = UXPanelRowAlignment.SPACE_BETWEEN;
+//        }});
+//
+//        final UXPanel leftSideBar = new UXPanel(new UXPanelSettings() {{
+//            width = 320;
+//            height = win.getHeight() - 32;
+//            color = theme.getThemeAttribute("layerSolid1");
+//        }});
+//
+//        final UXPanel body = new UXPanel(new UXPanelSettings() {{
+//            width = win.getWidth() - leftSideBar.getWidth();
+//            height = win.getHeight() - 32;
+//        }});
+//
+//        final UXPanel content = renderContent();
+//
+//        final AnimationInteger leftSideBarWidthEngine = new AnimationInteger(320, (engine, value) -> {
+//            leftSideBar.setWidth(value);
+//            body.setWidth(win.getWidth() - leftSideBar.getWidth());
+//            content.setWidth(body.getWidth());
+//        });
+//
+//        final UXPanel sideBarContent = renderSideBarContent();
+//
+//        final UXButton toggleTheme = new UXButton("Toggle Theme", new UXButtonSettings() {{
+//
+//        }});
+//
+//        final UXButton openWindowsCMD = new UXButton("Open CMD", new UXButtonSettings() {{
+//            onMouseClick = (button) -> {
+//                try {
+//                    runCommand("cmd", "/c start cmd.exe");
+//                } catch (WindowNotRunning windowNotRunning) {
+//                    windowNotRunning.printStackTrace();
+//                }
+//            };
+//        }});
+//
+//        final UXButton toggleSideBar = new UXButton("Toggle Sidebar", new UXButtonSettings() {{
+//            onMouseClick = (iButton) -> {
+//                if (leftSideBar.getWidth() == 0) {
+//                    leftSideBarWidthEngine.transitionTo(320.0f, 800);
+//                    body.setWidth(win.getWidth() - leftSideBar.getWidth());
+//                } else {
+//                    leftSideBarWidthEngine.transitionTo(0.0f, 800);
+//                    body.setWidth(win.getWidth());
+//                }
+//
+//                body.setWidth(win.getWidth() - leftSideBar.getWidth());
+//                content.setWidth(body.getWidth());
+//            };
+//        }});
+//
+//        win.setOnResize((iWin) -> {
+//            root.setWidth(iWin.getWidth());
+//            root.setHeight(iWin.getHeight() - 32);
+//
+//            leftSideBar.setHeight(iWin.getHeight() - 32);
+//
+//            body.setWidth(iWin.getWidth() - leftSideBar.getWidth());
+//            body.setHeight(iWin.getHeight() - 32);
+//
+//            content.setWidth(body.getWidth());
+//            content.setHeight(body.getHeight());
+//        });
+//
+//        content.add(toggleSideBar);
+//        content.add(toggleTheme);
+//        content.add(openWindowsCMD);
+//
+//        body.add(content);
+//        leftSideBar.add(sideBarContent);
+//
+//        root.add(leftSideBar);
+//        root.add(body);
+//
+//        win.setRootElement(root);
+//        win.run();
+    }
+
+    private static UXPanel renderContent() throws InvalidHexCode {
+        return new UXPanel(new UXPanelSettings() {{
+            rowAlignment = UXPanelRowAlignment.SPACE_EVENLY;
             columnAlignment = UXPanelColumnAlignment.CENTER;
-        }});
-
-        UXComponent pane = new UXComponent();
-        JScrollPane scroll = new JScrollPane();
-
-        scroll.setSize(1000, 600 - 32);
-        
-        for (int i = 0; i < 100; i++) {
-            scroll.add(new JLabel("Hello World"));
-        }
-
-        pane.setElement(scroll);
-
-        Desktop window = new Desktop(new DesktopSettings() {{
-//            frameType = DesktopFrameType.HIDDEN;
-            onResize = (win) -> {
-                panel.setSize(win.getWidth(), win.getHeight() - 32);
-            };
+            flowDirection = UXPanelFlowDirection.ROW;
+            spacingX = 10;
         }});
+    }
 
-        InputStream iht = MyApp.class.getClassLoader().getResourceAsStream("hello");
-        String ht = iht.toString();
-
-        UXButton button1 = new UXButton(ht);
-        UXButton button2 = new UXButton("Button B");
-        UXButton button3 = new UXButton("Button C", new UXButtonSettings() {{ type = UXButtonType.HIGHLIGHTED; onMouseClick = (btn) -> {
-            Logger.infoBase("Clicked");
-            try {
-                panel.add(new UXButton("Button D"));
-            } catch (InvalidHexCode e) {
-                e.printStackTrace();
-            }
-        }; }});
-
-        UXComponent jbtn = new UXComponent();
-        jbtn.setElement(new JButton("Hello World"));
+    private static void runCommand(String command, String args) throws WindowNotRunning {
+        try {
+            Runtime.getRuntime().exec(command + " " + args);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 
-        int pcRam = 293213712;
-        UXLabel label = new UXLabel("App Ram Usage: - " + pcRam + "GB");
-
-        UXLabel a = new UXLabel("Hello World");
-        UXLabel b = new UXLabel("Hello World");
-
-        UXPanel item1 = new UXPanel(new UXPanelSettings() {{
-            cornerRadius = 4;
-            width = 300;
-            height = 80;
-            color = theme.getThemeAttribute("component1");
+    private static UXPanel renderSideBarContent() throws InvalidHexCode {
+        final UXPanel sideBarContent = new UXPanel(new UXPanelSettings() {{
+            width = 340;
+            height = win.getHeight() - 32;
+            flowDirection = UXPanelFlowDirection.COLUMN;
             rowAlignment = UXPanelRowAlignment.CENTER;
-            columnAlignment = UXPanelColumnAlignment.CENTER;
-            
-            onMouseEnter = (p) -> {
-                try {
-                    p.setColor(new ThemeDark().getThemeAttribute("highlight4"));
-                    a.setColor(new ThemeDark().getThemeAttribute("highlightText4"));
-                } catch (InvalidHexCode e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            };
-            
-            onMouseExit = (p) -> {
-                try {
-                    p.setColor(new ThemeDark().getThemeAttribute("component1"));
-                    a.setColor(new ThemeDark().getThemeAttribute("text4"));
-                } catch (InvalidHexCode e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            };
         }});
 
-        UXPanel item2 = new UXPanel(new UXPanelSettings() {{
-            cornerRadius = 4;
-            rowAlignment = UXPanelRowAlignment.CENTER;
-            columnAlignment = UXPanelColumnAlignment.CENTER;
-            width = 300;
-            height = 80;
-            color = theme.getThemeAttribute("component1");
+        class SideBarElementButton extends UXPanel {
+            public SideBarElementButton(String label, Runnable action) throws InvalidHexCode {
+                super(new UXPanelSettings() {{
+                    cornerRadius = 4;
+                    width = 320 - 20;
+                    height = 32;
 
-            onMouseEnter = (p) -> {
-                try {
-                    p.setColor(new ThemeDark().getThemeAttribute("highlight4"), 100);
-                    b.setColor(new ThemeDark().getThemeAttribute("highlightText4"), 100);
-                } catch (InvalidHexCode e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            };
-            
-            onMouseExit = (p) -> {
-                try {
-                    b.setColor(new ThemeDark().getThemeAttribute("text4"), 100);
-                    p.setColor(new ThemeDark().getThemeAttribute("component1"), 100);
-                } catch (InvalidHexCode e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            };
-        }});
-//        panel.add(jbtn);
-
-        UXPanel stuff = new UXPanel(new UXPanelSettings() {{
-            width = 300;
-            height = (80 * 2) + 10;
-            flowDirection = UXPanelFlowDirection.COLUMN;
-            spacingY = 10;
-        }});
-
-        item1.add(a);
-        item2.add(b);
-
-        stuff.add(item1);
-        stuff.add(item2);
-
-        panel.add(stuff);
-
-       window.setRootElement(panel);
-        window.run();
-
-        // taskbar overlay
-        Desktop tb = new Desktop(new DesktopSettings() {{
-            frameType = DesktopFrameType.NONE;
-            alwaysOnTop = true;
-        }});
-
-        UXPanel rootTB = new UXPanel(new UXPanelSettings() {{
-            rowAlignment = UXPanelRowAlignment.CENTER;
-            columnAlignment = UXPanelColumnAlignment.CENTER;
-            width = 1920;
-            height = 50;
-            color = new ThemeColor("#230500");
-        }});
+                    onMouseEnter = (p) -> {
+                        try {
+                            p.setColor(new ThemeDark().getThemeAttribute("component1"));
+                        } catch (InvalidHexCode e) {
+                            e.printStackTrace();
+                        }
+                    };
+
+                    onMouseExit = (p) -> {
+                        try {
+                            p.setColor(new ThemeDark().getThemeAttribute("layerSolid1"));
+                        } catch (InvalidHexCode e) {
+                            e.printStackTrace();
+                        }
+                    };
+                }});
 
-        UXButton btnTB = new UXButton("Stop", new UXButtonSettings() {{
-            type = UXButtonType.CRITICAL;
-            onMouseClick = (btn) -> {
-                try {
-                    tb.stop();
-                } catch (WindowNotRunning e) {
-                    e.printStackTrace();
-                }
-            };
-        }});
+                setWidth(320 - 20);
+                setColumnAlignment(UXPanelColumnAlignment.CENTER);
+
+                final UXLabel labelElement = new UXLabel(label, new UXLabelSettings() {{
+                    fontSize = 13;
+                    margin = new UXPanelMargin(0, 0, 10, 0);
+                }});
 
-        rootTB.add(btnTB);
+                setHeight(32);
 
-        tb.setWidth(1920);
-        tb.setHeight(50);
+                add(labelElement);
+            }
+        }
 
-        tb.setPositionY(1080 - 50);
+        final SideBarElementButton helloWorld1 = new SideBarElementButton("Hello World 1", () -> {
+            Logger.infoBase("Hello World 1");
+        });
 
-        tb.setRootElement(rootTB);
-//        tb.run();
+        final SideBarElementButton helloWorld2 = new SideBarElementButton("Hello World 2", () -> {
+            Logger.infoBase("Hello World 2");
+        });
 
-        AnimationColor ac = new AnimationColor(new ThemeColor("#000"), (t, c) -> {
-            jbtn.getSwingComponent().setBackground(c.getAwtColor());
-        });
+        // create 20 more buttons
+        for (int i = 0; i < 20; i++) {
+            int finalI = i;
+            final SideBarElementButton helloWorld = new SideBarElementButton("Hello World " + i, () -> {
+                Logger.infoBase("Hello World " + finalI);
+            });
 
-        jbtn.getSwingComponent().addMouseListener(new java.awt.event.MouseAdapter() {
-            @Override
-            public void mouseEntered(java.awt.event.MouseEvent e) {
-                try {
-                    ac.moveTo(new ThemeColor("#FFAA62"), 0);
-                } catch (InvalidHexCode ex) {
-                    ex.printStackTrace();
-                }
-            }
+            sideBarContent.add(helloWorld);
+        }
 
-            @Override
-            public void mouseExited(java.awt.event.MouseEvent e) {
-                try {
-                    ac.moveTo(new ThemeColor("#000"), 1000);
-                } catch (InvalidHexCode ex) {
-                    ex.printStackTrace();
-                }
-            }
+        sideBarContent.add(helloWorld1);
+        sideBarContent.add(helloWorld2);
 
-            @Override
-            public void mousePressed(java.awt.event.MouseEvent e) {
-                try {
-                    ac.moveTo(new ThemeColor("#FFFFFF"), 1000);
-                } catch (InvalidHexCode ex) {
-                    ex.printStackTrace();
-                }
-            }
-        });
+        return sideBarContent;
     }
 }
Index: desktop/src/main/java/net/skylix/elixor/desktop/animation/AnimationInteger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.skylix.elixor.desktop.animation;\r\n\r\nimport java.util.function.BiConsumer;\r\n\r\npublic class AnimationInteger {\r\n    private float current;\r\n    private boolean done;\r\n    private Thread thread;\r\n    private float target;\r\n    private float clockDelay;\r\n    private float jumpSize;\r\n    private final BiConsumer<AnimationInteger, Integer> onUpdate;\r\n\r\n    public AnimationInteger(float current, BiConsumer<AnimationInteger, Integer> onUpdate) {\r\n        this.current = current;\r\n        this.target = current;\r\n        this.done = true;\r\n        this.onUpdate = onUpdate;\r\n    }\r\n\r\n    private void threadCallback() {\r\n        while (!done) {\r\n            float clockDelayProcessed = clockDelay;\r\n\r\n            if (clockDelayProcessed < 0)\r\n                clockDelayProcessed = 0;\r\n\r\n            try {\r\n                Thread.sleep((long) clockDelayProcessed);\r\n            } catch (InterruptedException e) {\r\n                // Ignore\r\n            }\r\n\r\n            if (this.current < target) {\r\n                this.current += jumpSize;\r\n\r\n                if (this.current > target)\r\n                    this.current = target;\r\n            } else if (this.current > target) {\r\n                this.current -= jumpSize;\r\n\r\n                if (this.current < target)\r\n                    this.current = target;\r\n            } else {\r\n                done = true;\r\n            }\r\n\r\n            onUpdate.accept(this, (int) this.current);\r\n        }\r\n    }\r\n\r\n    public final void transitionTo(float newInt, float jumpSize, float clockDelay) {\r\n        target = newInt;\r\n        this.clockDelay = clockDelay;\r\n        this.jumpSize = jumpSize;\r\n        done = false;\r\n\r\n        if (thread == null || !thread.isAlive()) {\r\n            try {\r\n                this.thread = new Thread(this::threadCallback);\r\n            } catch (Exception e) {\r\n                // Ignore\r\n                done = true;\r\n            }\r\n\r\n            try {\r\n                thread.start();\r\n            } catch (Exception e) {\r\n                // Ignore\r\n                done = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public final void halt() {\r\n        if (thread != null && thread.isAlive())\r\n            thread.interrupt();\r\n\r\n        done = true;\r\n    }\r\n\r\n    public final float testTargetDistance(float newInt, float jumpSize) {\r\n        float dist = (float) Math.ceil((newInt - current) / jumpSize);\r\n\r\n        if (dist < 0)\r\n            dist *= -1;\r\n\r\n        return dist;\r\n    }\r\n}\r\n
===================================================================
diff --git a/desktop/src/main/java/net/skylix/elixor/desktop/animation/AnimationInteger.java b/desktop/src/main/java/net/skylix/elixor/desktop/animation/AnimationInteger.java
--- a/desktop/src/main/java/net/skylix/elixor/desktop/animation/AnimationInteger.java	
+++ b/desktop/src/main/java/net/skylix/elixor/desktop/animation/AnimationInteger.java	
@@ -45,7 +45,7 @@
                 done = true;
             }
 
-            onUpdate.accept(this, (int) this.current);
+            onUpdate.accept(this, (int) ((int) current));
         }
     }
 
@@ -72,6 +72,14 @@
         }
     }
 
+    public final void transitionTo(float newInt, int duration) {
+        final int jumpSize = 1;
+        final float ticksNeeded = testTargetDistance(newInt, jumpSize);
+
+        final float cycleDelay = duration / ticksNeeded;
+        transitionTo(newInt, jumpSize, cycleDelay);
+    }
+
     public final void halt() {
         if (thread != null && thread.isAlive())
             thread.interrupt();
Index: desktop/src/main/java/net/skylix/elixor/desktop/ux/uxLabel/UXLabel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.skylix.elixor.desktop.ux.uxLabel;\r\n\r\nimport net.skylix.elixor.desktop.accessibility.Accessibility;\r\nimport net.skylix.elixor.desktop.animation.AnimationColor;\r\nimport net.skylix.elixor.desktop.theme.Theme;\r\nimport net.skylix.elixor.desktop.theme.ThemeColor;\r\nimport net.skylix.elixor.desktop.ux.uxComponent.UXComponent;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelMargin;\r\nimport net.skylix.elixor.terminal.color.errors.InvalidHexCode;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class UXLabel extends UXComponent {\r\n    private final UXLabelSettings settings;\r\n    private final AnimationColor animationColor;\r\n    private final JLabel label;\r\n    private String text;\r\n    private UXPanelMargin margin;\r\n\r\n    public UXLabel(String text, UXLabelSettings settings) {\r\n        super(settings.theme, settings.accessibility);\r\n\r\n        this.settings = settings;\r\n        this.text = text;\r\n        this.label = new JLabel();\r\n        this.margin = settings.margin;\r\n\r\n        label.setText(text);\r\n        label.setFont(new Font(\"Arial\", Font.PLAIN, settings.fontSize));\r\n        label.setForeground(settings.color.getAwtColor());\r\n\r\n        animationColor = new AnimationColor(settings.color, (acl, color) -> {\r\n            label.setForeground(color.getAwtColor());\r\n        });\r\n\r\n        LabelElement labelElement = new LabelElement(this);\r\n        setElement(labelElement);\r\n\r\n        getSwingComponent().setPreferredSize(getSize());\r\n        getSwingComponent().setSize(getSize());\r\n\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public final void setMargin(UXPanelMargin margin) {\r\n        this.margin = margin;\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    private static class LabelElement extends JComponent {\r\n        private final UXLabel uxLabel;\r\n\r\n        public LabelElement(UXLabel uxLabel) {\r\n            super();\r\n\r\n            this.uxLabel = uxLabel;\r\n        }\r\n\r\n        @Override\r\n        public void paintComponent(Graphics g) {\r\n            super.paintComponent(g);\r\n\r\n            Graphics2D g2d = (Graphics2D) g;\r\n\r\n            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n\r\n            g2d.setColor(uxLabel.label.getForeground());\r\n            g2d.drawString(uxLabel.label.getText(), 0 + uxLabel.margin.getLeft(), uxLabel.label.getFont().getSize() + uxLabel.margin.getTop());\r\n        } \r\n    }\r\n\r\n    public UXLabel(String text) throws InvalidHexCode {\r\n        this(text, new UXLabelSettings());\r\n    }\r\n\r\n    public UXLabel() throws InvalidHexCode {\r\n        this(\"...\", new UXLabelSettings());\r\n    }\r\n\r\n    public final void setText(String text) {\r\n        this.text = text;\r\n        label.setText(text);\r\n\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public final void setColor(ThemeColor color, int duration) {\r\n        animationColor.moveTo(color, duration);\r\n    }\r\n\r\n    public final void setColor(ThemeColor color) {\r\n        setColor(color, 0);\r\n    }\r\n\r\n    public final void setFontSize(int size) {\r\n        label.setFont(label.getFont().deriveFont((float) size));\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public final int getFontSize() {\r\n        return label.getFont().getSize();\r\n    }\r\n\r\n    public final int getWidth() {\r\n        return label.getFontMetrics(label.getFont()).stringWidth(text) + margin.getLeft() + margin.getRight();\r\n    }\r\n\r\n    public final int getHeight() {\r\n        return label.getFontMetrics(label.getFont()).getHeight() + margin.getTop() + margin.getBottom();\r\n    }\r\n\r\n    public final Dimension getSize() {\r\n        return new Dimension(getWidth(), getHeight());\r\n    }\r\n}\r\n
===================================================================
diff --git a/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxLabel/UXLabel.java b/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxLabel/UXLabel.java
--- a/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxLabel/UXLabel.java	
+++ b/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxLabel/UXLabel.java	
@@ -13,7 +13,6 @@
 
 public class UXLabel extends UXComponent {
     private final UXLabelSettings settings;
-    private final AnimationColor animationColor;
     private final JLabel label;
     private String text;
     private UXPanelMargin margin;
@@ -30,10 +29,6 @@
         label.setFont(new Font("Arial", Font.PLAIN, settings.fontSize));
         label.setForeground(settings.color.getAwtColor());
 
-        animationColor = new AnimationColor(settings.color, (acl, color) -> {
-            label.setForeground(color.getAwtColor());
-        });
-
         LabelElement labelElement = new LabelElement(this);
         setElement(labelElement);
 
@@ -85,12 +80,9 @@
         getSwingComponent().repaint();
     }
 
-    public final void setColor(ThemeColor color, int duration) {
-        animationColor.moveTo(color, duration);
-    }
-
     public final void setColor(ThemeColor color) {
-        setColor(color, 0);
+        label.setForeground(color.getAwtColor());
+        getSwingComponent().repaint();
     }
 
     public final void setFontSize(int size) {
Index: desktop/src/main/java/net/skylix/elixor/desktop/ux/uxPanel/UXPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.skylix.elixor.desktop.ux.uxPanel;\r\n\r\nimport net.skylix.elixor.desktop.animation.AnimationColor;\r\nimport net.skylix.elixor.desktop.local.ModJFrame;\r\nimport net.skylix.elixor.desktop.local.windows.WindowsJFrameProcess;\r\nimport net.skylix.elixor.desktop.theme.ThemeColor;\r\nimport net.skylix.elixor.desktop.ux.uxComponent.UXComponent;\r\nimport net.skylix.elixor.terminal.color.errors.InvalidHexCode;\r\nimport net.skylix.elixor.terminal.logger.Logger;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.ArrayList;\r\nimport java.util.function.BiConsumer;\r\nimport java.util.function.Consumer;\r\nimport java.util.function.Function;\r\nimport java.util.stream.Stream;\r\n\r\npublic class UXPanel extends UXComponent {\r\n    private final UXPanelSettings settings;\r\n    private ThemeColor currentColor;\r\n    private Integer currentWidth;\r\n    private Integer currentHeight;\r\n    private UXPanelFlowDirection currentFlowDirection;\r\n    private UXPanelRowAlignment currentRowAlignment;\r\n    private UXPanelColumnAlignment currentColumnAlignment;\r\n    private final AnimationColor animationColor;\r\n    private final Point[] regionOnWindow;\r\n    private ModJFrame frame;\r\n    private boolean windowActionListenersCreated = false;\r\n    private UXPanelMargin margin;\r\n\r\n    public UXPanel(UXPanelSettings settings) throws InvalidHexCode {\r\n        super(settings.theme, settings.accessibility);\r\n\r\n        this.settings = settings;\r\n\r\n        this.regionOnWindow = new Point[] {\r\n            new Point(0, 0),\r\n            new Point(0, 0)\r\n        };\r\n\r\n        animationColor = new AnimationColor(settings.color, (ac, color) -> {\r\n            JComponent swingComponent = getSwingComponent();\r\n            this.currentColor = color;\r\n\r\n            if (swingComponent != null) {\r\n                swingComponent.setBackground(color.getAwtColor());\r\n                swingComponent.repaint();\r\n            }\r\n        });\r\n\r\n        currentHeight = settings.height;\r\n        currentWidth = settings.width;\r\n        currentColumnAlignment = settings.columnAlignment;\r\n        currentRowAlignment = settings.rowAlignment;\r\n        currentFlowDirection = settings.flowDirection;\r\n        currentColor = settings.color;\r\n        margin = settings.margin;\r\n\r\n        setElement(new Element(this));\r\n        setWidth(settings.width);\r\n        setHeight(settings.height);\r\n    }\r\n\r\n    public UXPanel() throws InvalidHexCode {\r\n        this(new UXPanelSettings());\r\n    }\r\n\r\n    public int getHeight() {\r\n        return getSwingComponent().getHeight();\r\n    }\r\n\r\n    public int getWidth() {\r\n        return getSwingComponent().getWidth();\r\n    }\r\n\r\n    public Dimension getSize() {\r\n        return getSwingComponent().getSize();\r\n    }\r\n\r\n    public final void setRowAlignment(UXPanelRowAlignment rowAlignment) {\r\n        currentRowAlignment = rowAlignment;\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public final void setColumnAlignment(UXPanelColumnAlignment columnAlignment) {\r\n        currentColumnAlignment = columnAlignment;\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public final void setFlowDirection(UXPanelFlowDirection flowDirection) {\r\n        currentFlowDirection = flowDirection;\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public void setColor(ThemeColor color, int duration) {\r\n        animationColor.moveTo(color,  duration);\r\n    }\r\n\r\n    public void setColor(ThemeColor color) {\r\n        setColor(color, 0);\r\n    }\r\n\r\n    public void setWidth(Integer width) {\r\n        int finalWidth = 0;\r\n        final Component[] components = getSwingComponent().getComponents();\r\n\r\n        if (width == null) {\r\n            for (Component component : components) {\r\n                finalWidth += component.getPreferredSize().width + 10;\r\n            }\r\n        } else {\r\n            finalWidth = width < 0 ? 0 : width;\r\n        }\r\n\r\n        currentWidth = finalWidth;\r\n\r\n        getSwingComponent().setSize(finalWidth, getHeight());\r\n        getSwingComponent().setPreferredSize(new Dimension(finalWidth, getHeight()));\r\n    }\r\n\r\n    public void setHeight(Integer height) {\r\n        int finalHeight = 0;\r\n        final Component[] components = getSwingComponent().getComponents();\r\n\r\n        if (height == null) {\r\n            int largestHeight = 0;\r\n\r\n            for (Component component : components) {\r\n                if (component.getPreferredSize().height > largestHeight) {\r\n                    largestHeight = component.getPreferredSize().height;\r\n                }\r\n            }\r\n\r\n            finalHeight = largestHeight + 10;\r\n        } else {\r\n            finalHeight = height < 0 ? 0 : height;\r\n        }\r\n\r\n        currentHeight = finalHeight;\r\n\r\n        getSwingComponent().setSize(getWidth(), finalHeight);\r\n        getSwingComponent().setPreferredSize(new Dimension(getWidth(), finalHeight));\r\n    }\r\n\r\n    public void setSize(Integer width, Integer height) {\r\n        setWidth(width);\r\n        setHeight(height);\r\n    }\r\n\r\n    public void add(UXComponent component) {\r\n        getSwingComponent().add(component.getSwingComponent());\r\n\r\n        recalculateMetrics();\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    private void recalculateMetrics() {\r\n        setWidth(currentWidth);\r\n        setHeight(currentHeight);\r\n    }\r\n\r\n    public void setMargin(UXPanelMargin margin) {\r\n        this.margin = margin;\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    public void clear() {\r\n        getSwingComponent().removeAll();\r\n        getSwingComponent().repaint();\r\n    }\r\n\r\n    private class Element extends JPanel {\r\n        public Element(UXPanel panel) {\r\n            super();\r\n\r\n            addMouseListener(new MouseAdapter() {\r\n                @Override\r\n                public void mouseClicked(MouseEvent e) {\r\n                    settings.onMouseClick.accept(panel);\r\n                }\r\n\r\n                @Override\r\n                public void mousePressed(MouseEvent e) {\r\n                    settings.onMouseDown.accept(panel);\r\n                }\r\n\r\n                @Override\r\n                public void mouseReleased(MouseEvent e) {\r\n                    settings.onMouseUp.accept(panel);\r\n                }\r\n\r\n                @Override\r\n                public void mouseEntered(MouseEvent e) {\r\n                    settings.onMouseEnter.accept(panel);\r\n                }\r\n\r\n                @Override\r\n                public void mouseExited(MouseEvent e) {\r\n                    settings.onMouseExit.accept(panel);\r\n                }\r\n            });\r\n\r\n            setOpaque(false);\r\n            setPreferredSize(getSize());\r\n        }\r\n\r\n        private Component findTallestComponent(Component[] components) {\r\n            Component tallest = components[0];\r\n\r\n            for (Component component : components) {\r\n                if (component.getPreferredSize().height > tallest.getPreferredSize().height) {\r\n                    tallest = component;\r\n                }\r\n            }\r\n\r\n            return tallest;\r\n        }\r\n\r\n        private int getTotalWidth(Component[] components) {\r\n            int totalWidth = 0;\r\n\r\n            for (Component component : components) {\r\n                totalWidth += component.getPreferredSize().width;\r\n            }\r\n\r\n            return totalWidth;\r\n        }\r\n\r\n        private ArrayList<Component> getParents(Component component) {\r\n            ArrayList<Component> parents = new ArrayList<>();\r\n            Component parent = component.getParent();\r\n\r\n            parents.add(component);\r\n\r\n            if (parent != null) {\r\n                parents.addAll(getParents(parent));\r\n            }\r\n\r\n            return parents;\r\n        }\r\n\r\n        private void handleDraggingSupport() {\r\n            WindowsJFrameProcess winProcess = frame.getWinProcess();\r\n\r\n            // get all parents and grandparents\r\n            final ArrayList<Component> parents = getParents(getParent());\r\n\r\n            final Point startRegion = new Point();\r\n            final Point endRegion = new Point();\r\n            final Point positionOnScreen = getLocationOnScreen();\r\n            final Point positionOnWindow = new Point(positionOnScreen.x - frame.getLocation().x, positionOnScreen.y - frame.getLocation().y);\r\n\r\n            startRegion.x = positionOnWindow.x;\r\n            startRegion.y = positionOnWindow.y;\r\n\r\n            endRegion.x = positionOnWindow.x + getWidth();\r\n            endRegion.y = positionOnWindow.y + getHeight();\r\n\r\n            if (winProcess != null && settings.dragRole != UXPanelWindowDragRole.COEXIST) {\r\n                // remove border pixels\r\n                startRegion.x -= 10;\r\n                startRegion.y -= 10;\r\n                endRegion.x -= 10;\r\n                endRegion.y -= 10;\r\n\r\n                regionOnWindow[0] = startRegion;\r\n                regionOnWindow[1] = endRegion;\r\n\r\n                if (settings.dragRole == UXPanelWindowDragRole.DRAG) {\r\n                    winProcess.removeTitleBarDragRegion(regionOnWindow);\r\n                    winProcess.addTitleBarDragRegion(regionOnWindow);\r\n                } else {\r\n                    winProcess.removeTitleBarExcludedDragRegion(regionOnWindow);\r\n                    winProcess.addTitleBarExcludedDragRegion(regionOnWindow);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void paintComponent(Graphics g) {\r\n            if (margin.getTotal() > 0)\r\n                setBorder(BorderFactory.createEmptyBorder(\r\n                        margin.getTop(),\r\n                        margin.getLeft(),\r\n                        margin.getBottom(),\r\n                        margin.getRight()\r\n                ));\r\n\r\n            super.paintComponent(g);\r\n\r\n            if (frame == null) {\r\n                frame = (ModJFrame) SwingUtilities.getWindowAncestor(this);\r\n            }\r\n\r\n            handleDraggingSupport();\r\n            recalculateMetrics();\r\n            Graphics2D g2d = (Graphics2D) g;\r\n\r\n            g2d.setColor(currentColor.getAwtColor());\r\n\r\n            if (settings.cornerRadius > 0) {\r\n                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), settings.cornerRadius, settings.cornerRadius);\r\n            } else {\r\n                g2d.fillRect(0, 0, getWidth(), getHeight());\r\n            }\r\n\r\n            int spacingX = settings.spacingX;\r\n            int spacingY = settings.spacingY;\r\n\r\n            boolean wrapping = false;\r\n\r\n            int componentID = 0;\r\n            int lastX = 0;\r\n            int lastY = 0;\r\n            int lastRenderingWidth = 0;\r\n            int lastRenderingHeight = 0;\r\n            int totalLinesWrapped = 0;\r\n\r\n            UXPanelRowAlignment rowAlignment = settings.rowAlignment;\r\n            UXPanelColumnAlignment columnAlignment = settings.columnAlignment;\r\n\r\n            if (getComponents().length < 2 && (rowAlignment == UXPanelRowAlignment.SPACE_BETWEEN || rowAlignment == UXPanelRowAlignment.SPACE_EVENLY)) {\r\n                rowAlignment = UXPanelRowAlignment.CENTER;\r\n            }\r\n\r\n            for (Component component : getComponents()) {\r\n                if (!wrapping) {\r\n                    if (currentFlowDirection == UXPanelFlowDirection.ROW) {\r\n                        if (componentID == 0 && rowAlignment == UXPanelRowAlignment.RIGHT) {\r\n                            lastX = getWidth() - component.getWidth();\r\n                        } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.CENTER) {\r\n                            final int totalWidth = getTotalWidth(getComponents()) + (getComponents().length - 1) * spacingX;\r\n                            lastX = (getWidth() - totalWidth) / 2;\r\n                        } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.SPACE_EVENLY) {\r\n                            lastX = ((getWidth() - getTotalWidth(getComponents())) / getComponents().length) / 2;\r\n                        }\r\n\r\n                        if (columnAlignment == UXPanelColumnAlignment.CENTER) {\r\n                            lastY = (getHeight() - component.getHeight()) / 2;\r\n                        } else if (componentID == 0 && columnAlignment == UXPanelColumnAlignment.BOTTOM) {\r\n                            Component tallestComponent = findTallestComponent(getComponents());\r\n                            lastY = getHeight() - tallestComponent.getHeight();\r\n                        }\r\n\r\n                        component.setLocation(lastX, lastY);\r\n\r\n                        if (rowAlignment == UXPanelRowAlignment.LEFT) {\r\n                            if (componentID == getComponents().length - 1) lastX += component.getWidth();\r\n                            else lastX += component.getWidth() + spacingX;\r\n                        } else if (rowAlignment == UXPanelRowAlignment.CENTER) {\r\n                            if (componentID == getComponents().length - 1) lastX += component.getWidth();\r\n                            else lastX += component.getWidth() + spacingX;\r\n                        } else if (rowAlignment == UXPanelRowAlignment.RIGHT) {\r\n                            if (componentID == getComponents().length - 1) lastX -= component.getWidth();\r\n                            else lastX -= component.getWidth() + spacingX;\r\n                        } else if (rowAlignment == UXPanelRowAlignment.SPACE_EVENLY) {\r\n                            lastX += component.getWidth() + (getWidth() - getTotalWidth(getComponents())) / getComponents().length;\r\n                        } else if (rowAlignment == UXPanelRowAlignment.SPACE_BETWEEN) {\r\n                            lastX += component.getWidth() + (getWidth() - getTotalWidth(getComponents())) / (getComponents().length - 1);\r\n                        }\r\n                    } else {\r\n                        if (componentID == 0 && columnAlignment == UXPanelColumnAlignment.CENTER) {\r\n                            Component tallestComponent = findTallestComponent(getComponents());\r\n                            lastY = (getHeight() - tallestComponent.getHeight()) / 2;\r\n                        } else if (componentID == 0 && columnAlignment == UXPanelColumnAlignment.BOTTOM) {\r\n                            Component tallestComponent = findTallestComponent(getComponents());\r\n                            lastY = getHeight() - tallestComponent.getHeight();\r\n                        }\r\n\r\n                        component.setLocation(lastX, lastY);\r\n\r\n                        if (columnAlignment == UXPanelColumnAlignment.TOP) {\r\n                            if (componentID == getComponents().length - 1) lastY += component.getHeight();\r\n                            else lastY += component.getHeight() + spacingY;\r\n                        } else if (columnAlignment == UXPanelColumnAlignment.CENTER) {\r\n                            if (componentID == getComponents().length - 1) lastY += component.getHeight();\r\n                            else lastY += component.getHeight() + spacingY;\r\n                        } else if (columnAlignment == UXPanelColumnAlignment.BOTTOM) {\r\n                            if (componentID == getComponents().length - 1) lastY -= component.getHeight();\r\n                            else lastY -= component.getHeight() + spacingY;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                componentID++;\r\n            }\r\n\r\n            paintChildren(g);\r\n            g2d.dispose();\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxPanel/UXPanel.java b/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxPanel/UXPanel.java
--- a/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxPanel/UXPanel.java	
+++ b/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxPanel/UXPanel.java	
@@ -52,8 +52,8 @@
             }
         });
 
-        currentHeight = settings.height;
-        currentWidth = settings.width;
+        currentHeight = settings.height == null ? 0 : settings.height;
+        currentWidth = settings.width == null ? 0 : settings.width;
         currentColumnAlignment = settings.columnAlignment;
         currentRowAlignment = settings.rowAlignment;
         currentFlowDirection = settings.flowDirection;
@@ -109,17 +109,15 @@
         final Component[] components = getSwingComponent().getComponents();
 
         if (width == null) {
-            for (Component component : components) {
-                finalWidth += component.getPreferredSize().width + 10;
-            }
+            finalWidth = 100;
         } else {
             finalWidth = width < 0 ? 0 : width;
         }
 
         currentWidth = finalWidth;
 
-        getSwingComponent().setSize(finalWidth, getHeight());
-        getSwingComponent().setPreferredSize(new Dimension(finalWidth, getHeight()));
+        getSwingComponent().setSize(finalWidth, currentHeight);
+        getSwingComponent().setPreferredSize(new Dimension(finalWidth, currentHeight));
     }
 
     public void setHeight(Integer height) {
@@ -127,23 +125,15 @@
         final Component[] components = getSwingComponent().getComponents();
 
         if (height == null) {
-            int largestHeight = 0;
-
-            for (Component component : components) {
-                if (component.getPreferredSize().height > largestHeight) {
-                    largestHeight = component.getPreferredSize().height;
-                }
-            }
-
-            finalHeight = largestHeight + 10;
+            finalHeight = 100;
         } else {
             finalHeight = height < 0 ? 0 : height;
         }
 
         currentHeight = finalHeight;
 
-        getSwingComponent().setSize(getWidth(), finalHeight);
-        getSwingComponent().setPreferredSize(new Dimension(getWidth(), finalHeight));
+        getSwingComponent().setSize(currentWidth, finalHeight);
+        getSwingComponent().setPreferredSize(new Dimension(currentWidth, finalHeight));
     }
 
     public void setSize(Integer width, Integer height) {
@@ -165,6 +155,8 @@
 
     public void setMargin(UXPanelMargin margin) {
         this.margin = margin;
+
+        recalculateMetrics();
         getSwingComponent().repaint();
     }
 
@@ -173,6 +165,26 @@
         getSwingComponent().repaint();
     }
 
+    public final void setOnMouseEnter(Consumer<UXPanel> listener) {
+        settings.onMouseEnter = listener;
+    }
+
+    public final void setOnMouseExit(Consumer<UXPanel> listener) {
+        settings.onMouseExit = listener;
+    }
+
+    public final void setOnMouseClick(Consumer<UXPanel> listener) {
+        settings.onMouseClick = listener;
+    }
+
+    public final void setOnMouseDown(Consumer<UXPanel> listener) {
+        settings.onMouseDown = listener;
+    }
+
+    public final void setOnMouseUp(Consumer<UXPanel> listener) {
+        settings.onMouseUp = listener;
+    }
+
     private class Element extends JPanel {
         public Element(UXPanel panel) {
             super();
@@ -282,13 +294,9 @@
 
         @Override
         protected void paintComponent(Graphics g) {
-            if (margin.getTotal() > 0)
-                setBorder(BorderFactory.createEmptyBorder(
-                        margin.getTop(),
-                        margin.getLeft(),
-                        margin.getBottom(),
-                        margin.getRight()
-                ));
+            if (margin.getTotal() > 0) {
+                setBorder(BorderFactory.createEmptyBorder(margin.getTop(), margin.getLeft(), margin.getBottom(), margin.getRight()));
+            }
 
             super.paintComponent(g);
 
@@ -302,10 +310,13 @@
 
             g2d.setColor(currentColor.getAwtColor());
 
+            final int width = getWidth() + margin.getRight();
+            final int height = getHeight() + margin.getBottom();
+
             if (settings.cornerRadius > 0) {
-                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), settings.cornerRadius, settings.cornerRadius);
+                g2d.fillRoundRect(margin.getLeft(), margin.getTop(), width, height, settings.cornerRadius, settings.cornerRadius);
             } else {
-                g2d.fillRect(0, 0, getWidth(), getHeight());
+                g2d.fillRect(margin.getLeft(), margin.getTop(), width, height);
             }
 
             int spacingX = settings.spacingX;
@@ -316,9 +327,6 @@
             int componentID = 0;
             int lastX = 0;
             int lastY = 0;
-            int lastRenderingWidth = 0;
-            int lastRenderingHeight = 0;
-            int totalLinesWrapped = 0;
 
             UXPanelRowAlignment rowAlignment = settings.rowAlignment;
             UXPanelColumnAlignment columnAlignment = settings.columnAlignment;
@@ -331,19 +339,19 @@
                 if (!wrapping) {
                     if (currentFlowDirection == UXPanelFlowDirection.ROW) {
                         if (componentID == 0 && rowAlignment == UXPanelRowAlignment.RIGHT) {
-                            lastX = getWidth() - component.getWidth();
+                            lastX = width - component.getWidth();
                         } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.CENTER) {
                             final int totalWidth = getTotalWidth(getComponents()) + (getComponents().length - 1) * spacingX;
-                            lastX = (getWidth() - totalWidth) / 2;
+                            lastX = (width - totalWidth) / 2;
                         } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.SPACE_EVENLY) {
-                            lastX = ((getWidth() - getTotalWidth(getComponents())) / getComponents().length) / 2;
+                            lastX = ((width - getTotalWidth(getComponents())) / getComponents().length) / 2;
                         }
 
                         if (columnAlignment == UXPanelColumnAlignment.CENTER) {
-                            lastY = (getHeight() - component.getHeight()) / 2;
+                            lastY = (height - component.getHeight()) / 2;
                         } else if (componentID == 0 && columnAlignment == UXPanelColumnAlignment.BOTTOM) {
                             Component tallestComponent = findTallestComponent(getComponents());
-                            lastY = getHeight() - tallestComponent.getHeight();
+                            lastY = height - tallestComponent.getHeight();
                         }
 
                         component.setLocation(lastX, lastY);
@@ -365,10 +373,20 @@
                     } else {
                         if (componentID == 0 && columnAlignment == UXPanelColumnAlignment.CENTER) {
                             Component tallestComponent = findTallestComponent(getComponents());
-                            lastY = (getHeight() - tallestComponent.getHeight()) / 2;
+                            lastY = (height - tallestComponent.getHeight()) / 2;
                         } else if (componentID == 0 && columnAlignment == UXPanelColumnAlignment.BOTTOM) {
                             Component tallestComponent = findTallestComponent(getComponents());
-                            lastY = getHeight() - tallestComponent.getHeight();
+                            lastY = height - tallestComponent.getHeight();
+                        }
+
+                        if (componentID == 0 && rowAlignment == UXPanelRowAlignment.CENTER) {
+                            lastX = (width - component.getWidth()) / 2;
+                        } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.RIGHT) {
+                            lastX = width - component.getWidth();
+                        } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.SPACE_EVENLY) {
+                            lastX = ((width - getTotalWidth(getComponents())) / getComponents().length) / 2;
+                        } else if (componentID == 0 && rowAlignment == UXPanelRowAlignment.SPACE_BETWEEN) {
+
                         }
 
                         component.setLocation(lastX, lastY);
Index: desktop/src/main/java/net/skylix/elixor/desktop/ux/uxButton/UXButton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.skylix.elixor.desktop.ux.uxButton;\r\n\r\nimport net.skylix.elixor.desktop.animation.AnimationColor;\r\nimport net.skylix.elixor.desktop.theme.Theme;\r\nimport net.skylix.elixor.desktop.theme.ThemeColor;\r\nimport net.skylix.elixor.desktop.ux.uxComponent.UXComponent;\r\nimport net.skylix.elixor.desktop.ux.uxLabel.UXLabel;\r\nimport net.skylix.elixor.desktop.ux.uxLabel.UXLabelSettings;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanel;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelColumnAlignment;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelRowAlignment;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.UXPanelSettings;\r\nimport net.skylix.elixor.terminal.color.errors.InvalidHexCode;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class UXButton extends UXComponent {\r\n    private final UXButtonSettings settings;\r\n    private final AnimationColor animationColor;\r\n\r\n    public UXButton(String label, UXButtonSettings settings) throws InvalidHexCode {\r\n        super(settings.theme, settings.accessibility);\r\n\r\n        this.settings = settings;\r\n        UXButton self = this;\r\n        UXLabel text = new UXLabel(label);\r\n\r\n        UXPanel button = new UXPanel(new UXPanelSettings() {{\r\n            width = text.getWidth() + 40;\r\n            height = text.getHeight() + 10;\r\n            cornerRadius = accessibility.radius1;\r\n            rowAlignment = UXPanelRowAlignment.CENTER;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n\r\n            onMouseEnter = (panel) -> {\r\n                self.animationColor.moveTo(theme.getThemeAttribute(\"component2\"), accessibility.transitionSpeed5);\r\n                text.setColor(theme.getThemeAttribute(\"text1\"), accessibility.transitionSpeed5);\r\n            };\r\n\r\n            onMouseExit = (panel) -> {\r\n                self.animationColor.moveTo(theme.getThemeAttribute(\"component1\"), accessibility.transitionSpeed5);\r\n                text.setColor(theme.getThemeAttribute(\"text4\"), accessibility.transitionSpeed5);\r\n            };\r\n\r\n            onMouseClick = (panel) -> {\r\n                settings.onMouseClick.accept(self);\r\n            };\r\n        }});\r\n\r\n        button.setColor(theme.getThemeAttribute(\"component1\"));\r\n        button.add(text);\r\n\r\n        this.animationColor = new AnimationColor(theme.getThemeAttribute(\"component1\"), (acl, color) -> {\r\n            button.setColor(color);\r\n        });\r\n\r\n        setElement(button);\r\n    }\r\n\r\n    public UXButton(String label) throws InvalidHexCode {\r\n        this(label, new UXButtonSettings());\r\n    }\r\n\r\n    public UXButton() throws InvalidHexCode {\r\n        this(\"...\", new UXButtonSettings());\r\n    }\r\n}\r\n
===================================================================
diff --git a/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxButton/UXButton.java b/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxButton/UXButton.java
--- a/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxButton/UXButton.java	
+++ b/desktop/src/main/java/net/skylix/elixor/desktop/ux/uxButton/UXButton.java	
@@ -34,13 +34,13 @@
             columnAlignment = UXPanelColumnAlignment.CENTER;
 
             onMouseEnter = (panel) -> {
-                self.animationColor.moveTo(theme.getThemeAttribute("component2"), accessibility.transitionSpeed5);
-                text.setColor(theme.getThemeAttribute("text1"), accessibility.transitionSpeed5);
+                self.animationColor.moveTo(theme.getThemeAttribute("component2"));
+                text.setColor(theme.getThemeAttribute("text1"));
             };
 
             onMouseExit = (panel) -> {
-                self.animationColor.moveTo(theme.getThemeAttribute("component1"), accessibility.transitionSpeed5);
-                text.setColor(theme.getThemeAttribute("text4"), accessibility.transitionSpeed5);
+                self.animationColor.moveTo(theme.getThemeAttribute("component1"));
+                text.setColor(theme.getThemeAttribute("text4"));
             };
 
             onMouseClick = (panel) -> {
Index: desktop/src/main/java/net/skylix/elixor/desktop/theme/presets/ThemeDark.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.skylix.elixor.desktop.theme.presets;\r\n\r\nimport net.skylix.elixor.desktop.theme.Theme;\r\nimport net.skylix.elixor.desktop.theme.ThemeColor;\r\nimport net.skylix.elixor.terminal.color.errors.InvalidHexCode;\r\n\r\nimport java.awt.*;\r\nimport java.util.HashMap;\r\n\r\npublic class ThemeDark extends Theme {\r\n    public ThemeDark() throws InvalidHexCode {\r\n        super();\r\n\r\n        setThemeAttributes(new HashMap<>() {{\r\n            put(\"layerSolid1\", new ThemeColor(\"#202020\"));\r\n            put(\"layerSolid2\", new ThemeColor(\"#252525\"));\r\n            put(\"layerSolid3\", new ThemeColor(\"#272727\"));\r\n            put(\"layerSolid4\", new ThemeColor(\"#303030\"));\r\n\r\n            put(\"highlight1\", new ThemeColor(\"#577e91\"));\r\n            put(\"highlight2\", new ThemeColor(\"#6ea0b8\"));\r\n            put(\"highlight3\", new ThemeColor(\"#84c3e0\"));\r\n            put(\"highlight4\", new ThemeColor(\"#96deff\"));\r\n\r\n            put(\"highlightText1\", new ThemeColor(\"#274859\"));\r\n            put(\"highlightText2\", new ThemeColor(\"#1f3845\"));\r\n            put(\"highlightText3\", new ThemeColor(\"#111f26\"));\r\n            put(\"highlightText4\", new ThemeColor(\"#202020\"));\r\n\r\n            put(\"critical1\", new ThemeColor(\"#993636\"));\r\n            put(\"critical2\", new ThemeColor(\"#bf4141\"));\r\n            put(\"critical3\", new ThemeColor(\"#e34b4b\"));\r\n            put(\"critical4\", new ThemeColor(\"#ff5555\"));\r\n\r\n            put(\"criticalText1\", new ThemeColor(\"#692b25\"));\r\n            put(\"criticalText2\", new ThemeColor(\"#4d201b\"));\r\n            put(\"criticalText3\", new ThemeColor(\"#29110e\"));\r\n            put(\"criticalText4\", new ThemeColor(\"#202020\"));\r\n\r\n            put(\"text1\", new ThemeColor(\"#BDBDBD\"));\r\n            put(\"text2\", new ThemeColor(\"#D9D9D9\"));\r\n            put(\"text3\", new ThemeColor(\"#F1F1F1\"));\r\n            put(\"text4\", new ThemeColor(\"#FFFFFF\"));\r\n\r\n            put(\"component1\", new ThemeColor(\"#FFFFFF0C\"));\r\n            put(\"component2\", new ThemeColor(\"#FFFFFF19\"));\r\n            put(\"component3\", new ThemeColor(\"#FFFFFF26\"));\r\n            put(\"component4\", new ThemeColor(\"#FFFFFF33\"));\r\n        }});\r\n    }\r\n}\r\n
===================================================================
diff --git a/desktop/src/main/java/net/skylix/elixor/desktop/theme/presets/ThemeDark.java b/desktop/src/main/java/net/skylix/elixor/desktop/theme/presets/ThemeDark.java
--- a/desktop/src/main/java/net/skylix/elixor/desktop/theme/presets/ThemeDark.java	
+++ b/desktop/src/main/java/net/skylix/elixor/desktop/theme/presets/ThemeDark.java	
@@ -17,10 +17,10 @@
             put("layerSolid3", new ThemeColor("#272727"));
             put("layerSolid4", new ThemeColor("#303030"));
 
-            put("highlight1", new ThemeColor("#577e91"));
-            put("highlight2", new ThemeColor("#6ea0b8"));
-            put("highlight3", new ThemeColor("#84c3e0"));
-            put("highlight4", new ThemeColor("#96deff"));
+            put("highlight1", new ThemeColor("#264d5e"));
+            put("highlight2", new ThemeColor("#3e809e"));
+            put("highlight3", new ThemeColor("#52a9d1"));
+            put("highlight4", new ThemeColor("#60cdff"));
 
             put("highlightText1", new ThemeColor("#274859"));
             put("highlightText2", new ThemeColor("#1f3845"));
Index: desktop/src/main/java/net/skylix/elixor/desktop/Desktop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.skylix.elixor.desktop;\r\n\r\nimport net.skylix.elixor.desktop.errors.WindowAlreadyRunning;\r\nimport net.skylix.elixor.desktop.errors.WindowCannotReinitialize;\r\nimport net.skylix.elixor.desktop.errors.WindowNotRunning;\r\nimport net.skylix.elixor.desktop.local.ModJFrame;\r\nimport net.skylix.elixor.desktop.theme.ThemeColor;\r\nimport net.skylix.elixor.desktop.ux.uxComponent.UXComponent;\r\nimport net.skylix.elixor.desktop.ux.uxLabel.UXLabel;\r\nimport net.skylix.elixor.desktop.ux.uxLabel.UXLabelSettings;\r\nimport net.skylix.elixor.desktop.ux.uxPanel.*;\r\nimport net.skylix.elixor.terminal.color.errors.InvalidHexCode;\r\nimport net.skylix.elixor.terminal.logger.Logger;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.security.Provider;\r\nimport java.util.function.Function;\r\n\r\npublic class Desktop {\r\n    private final ModJFrame frame;\r\n    private final DesktopSettings settings;\r\n    private boolean running = false;\r\n    private final UXPanel root;\r\n    private final UXPanel body;\r\n    private boolean initiallyPowered = false;\r\n    private boolean maximized = false;\r\n\r\n    public Desktop(DesktopSettings settings) throws InvalidHexCode {\r\n        this.settings = settings;\r\n\r\n        frame = new ModJFrame(\r\n                \"Elixor [Single Service]\",\r\n                settings.frameType != DesktopFrameType.SYSTEM,\r\n                (settings.frameType == DesktopFrameType.HIDDEN || settings.frameType == DesktopFrameType.NONE) ? 0 : 20\r\n        );\r\n\r\n        frame.setAlwaysOnTop(settings.alwaysOnTop);\r\n\r\n        if (settings.frameType == DesktopFrameType.NONE) {\r\n            frame.setUndecorated(true);\r\n        }\r\n\r\n        frame.setSize(800, 500);\r\n\r\n        root = new UXPanel(new UXPanelSettings() {{\r\n            width = frame.getWidth();\r\n            height = frame.getHeight();\r\n            columnAlignment = UXPanelColumnAlignment.TOP;\r\n            rowAlignment = UXPanelRowAlignment.LEFT;\r\n            flowDirection = UXPanelFlowDirection.COLUMN;\r\n        }});\r\n\r\n        body = new UXPanel(new UXPanelSettings() {{\r\n            width = frame.getWidth();\r\n            height = frame.getHeight();\r\n        }});\r\n\r\n        renderContent();\r\n    }\r\n\r\n    private void renderContent() throws InvalidHexCode {\r\n        final UXPanel titleBar = renderTitleBar();\r\n        final UXPanel defaultRootElement = renderDefaultRootElement();\r\n        final JPanel contentPane = new JPanel();\r\n        final boolean isWindows = System.getProperty(\"os.name\").toLowerCase().contains(\"windows\");\r\n        final Desktop self = this;\r\n\r\n        contentPane.setLayout(new BorderLayout());\r\n        contentPane.add(root.getSwingComponent());\r\n        contentPane.setBackground(new Color(0, 0, 20));\r\n\r\n        body.setColor(settings.theme.getThemeAttribute(\"layerSolid1\"));\r\n\r\n        root.add(titleBar);\r\n        root.add(body);\r\n        root.setColor(new ThemeColor(\"#ff5555\"));\r\n\r\n        Runnable updateScaling = () -> {\r\n            if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\") && this.maximized) {\r\n                contentPane.setSize(frame.getWidth() - 8, frame.getHeight() - 8);\r\n                contentPane.setBorder(BorderFactory.createEmptyBorder(8, 8, 0, 0));\r\n            } else {\r\n                contentPane.setSize(frame.getWidth(), frame.getHeight());\r\n                contentPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n            }\r\n\r\n            root.setSize(contentPane.getWidth(), contentPane.getHeight());\r\n            body.setSize(root.getWidth(), root.getHeight() - titleBar.getHeight());\r\n\r\n            defaultRootElement.setSize(body.getWidth(), body.getHeight());\r\n            titleBar.setSize(contentPane.getWidth() - (maximized && isWindows ? 8 : 0), titleBar.getHeight());\r\n\r\n            body.getSwingComponent().repaint();\r\n            root.getSwingComponent().repaint();\r\n        };\r\n\r\n        frame.addComponentListener(new ComponentAdapter() {\r\n            @Override\r\n            public void componentResized(ComponentEvent e) {\r\n                updateScaling.run();\r\n\r\n                settings.onResize.accept(self);\r\n            }\r\n        });\r\n\r\n        frame.setOnMaximizeRunnable(() -> {\r\n            this.maximized = true;\r\n            updateScaling.run();\r\n        });\r\n\r\n        frame.setOnUnMaximizeRunnable(() -> {\r\n            this.maximized = false;\r\n            updateScaling.run();\r\n        });\r\n\r\n        frame.setContentPane(contentPane);\r\n\r\n        setRootElement(defaultRootElement);\r\n    }\r\n\r\n    private UXPanel renderDefaultRootElement() throws InvalidHexCode {\r\n        UXPanel defaultRootElement = new UXPanel(new UXPanelSettings() {{\r\n            width = frame.getWidth();\r\n            height = frame.getHeight();\r\n            rowAlignment = UXPanelRowAlignment.CENTER;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n            color = settings.theme.getThemeAttribute(\"layerSolid2\");\r\n        }});\r\n\r\n        UXLabel message = new UXLabel(\"Default Root Element\", new UXLabelSettings() {{\r\n            color = settings.theme.getThemeAttribute(\"text1\");\r\n        }});\r\n\r\n        defaultRootElement.add(message);\r\n        return defaultRootElement;\r\n    }\r\n\r\n    private UXPanel renderTitleBar() throws InvalidHexCode {\r\n        if (settings.frameType != DesktopFrameType.GENERIC) {\r\n            return new UXPanel();\r\n        }\r\n\r\n        UXPanel element = new UXPanel(new UXPanelSettings() {{\r\n            width = frame.getWidth();\r\n            height = 32;\r\n            color = settings.theme.getThemeAttribute(\"layerSolid1\");\r\n            rowAlignment = UXPanelRowAlignment.SPACE_BETWEEN;\r\n            dragRole = UXPanelWindowDragRole.DRAG;\r\n            columnAlignment = UXPanelColumnAlignment.CENTER;\r\n        }});\r\n\r\n        class TitleBarButton extends UXPanel {\r\n            public TitleBarButton(Type type) throws InvalidHexCode {\r\n                super(new UXPanelSettings() {{\r\n                    onMouseEnter = (p) -> {\r\n                        try {\r\n                            p.setColor(new ThemeColor(\"#ff5555\"), 100);\r\n                        } catch (InvalidHexCode e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    };\r\n\r\n                    onMouseExit = (p) -> {\r\n                        p.setColor(new ThemeColor(0, 0, 0, 0), 300);\r\n                    };\r\n\r\n                    dragRole = UXPanelWindowDragRole.EXCLUDE;\r\n                    rowAlignment = UXPanelRowAlignment.CENTER;\r\n                    columnAlignment = UXPanelColumnAlignment.CENTER;\r\n                }});\r\n\r\n                setSize(45, 32);\r\n                setRowAlignment(UXPanelRowAlignment.CENTER);\r\n                setColumnAlignment(UXPanelColumnAlignment.CENTER);\r\n\r\n                UXLabel label = new UXLabel(\"o\", new UXLabelSettings() {{\r\n                    fontSize = 13;\r\n                    color = settings.theme.getThemeAttribute(\"text4\");\r\n                }});\r\n\r\n                switch (type) {\r\n                    case MINIMIZE -> {\r\n                        label.setText(\"_\");\r\n                    }\r\n\r\n                    case MIDDLE -> {\r\n                        label.setText(\"o\");\r\n                    }\r\n\r\n                    case CLOSE -> {\r\n                        label.setText(\"x\");\r\n                    }\r\n                }\r\n\r\n                add(label);\r\n            }\r\n\r\n            static enum Type {\r\n                CLOSE,\r\n                MIDDLE,\r\n                MINIMIZE,\r\n            }\r\n        }\r\n\r\n        TitleBarButton closeButton = new TitleBarButton(TitleBarButton.Type.CLOSE);\r\n        TitleBarButton middleButton = new TitleBarButton(TitleBarButton.Type.MIDDLE);\r\n        TitleBarButton minimizeButton = new TitleBarButton(TitleBarButton.Type.MINIMIZE);\r\n\r\n        UXPanel buttonGroup = new UXPanel(new UXPanelSettings() {{\r\n            spacingX = 1;\r\n            width = (45 * 3) + 2;\r\n            height = 32;\r\n        }});\r\n\r\n        buttonGroup.add(minimizeButton);\r\n        buttonGroup.add(middleButton);\r\n        buttonGroup.add(closeButton);\r\n\r\n        UXLabel title = new UXLabel(\"Hello World\", new UXLabelSettings() {{\r\n            fontSize = 13;\r\n            color = settings.theme.getThemeAttribute(\"text4\");\r\n            margin = new UXPanelMargin(0, 0, 10, 0);\r\n        }});\r\n\r\n        element.add(title);\r\n        element.add(buttonGroup);\r\n\r\n        return element;\r\n    }\r\n\r\n    public final int getWidth() {\r\n        return frame.getWidth();\r\n    }\r\n\r\n    public final int getHeight() {\r\n        return frame.getHeight();\r\n    }\r\n\r\n    public final Dimension getSize() {\r\n        return frame.getSize();\r\n    }\r\n\r\n    public Desktop() throws InvalidHexCode {\r\n        this(new DesktopSettings());\r\n    }\r\n\r\n    public void setWidth(int width) {\r\n        frame.setSize(width, frame.getHeight());\r\n    }\r\n\r\n    public void setHeight(int height) {\r\n        frame.setSize(frame.getWidth(), height);\r\n    }\r\n\r\n    public void setSize(int width, int height) {\r\n        frame.setSize(width, height);\r\n    }\r\n\r\n    public void setPositionX(int x) {\r\n        frame.setLocation(x, frame.getY());\r\n    }\r\n\r\n    public void setPositionY(int y) {\r\n        frame.setLocation(frame.getX(), y);\r\n    }\r\n\r\n    public void setPosition(int x, int y) {\r\n        frame.setLocation(x, y);\r\n    }\r\n\r\n    public int getPositionX() {\r\n        return frame.getX();\r\n    }\r\n\r\n    public int getPositionY() {\r\n        return frame.getY();\r\n    }\r\n\r\n    public Point getPosition() {\r\n        return frame.getLocation();\r\n    }\r\n\r\n    public final void setAlwaysOnTop(boolean alwaysOnTop) {\r\n        frame.setAlwaysOnTop(alwaysOnTop);\r\n    }\r\n\r\n    public final void setRootElement(UXComponent rootElement) {\r\n        body.clear();\r\n        body.add(rootElement);\r\n    }\r\n\r\n    public final void run() throws WindowAlreadyRunning, WindowCannotReinitialize {\r\n        if (running || frame.isVisible()) {\r\n            throw new WindowAlreadyRunning(\"The window is already running\");\r\n        }\r\n\r\n        if (initiallyPowered) {\r\n            throw new WindowCannotReinitialize(\"The window cannot be reinitialized after run() was called once\");\r\n        }\r\n\r\n        initiallyPowered = true;\r\n        running = true;\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    public final void stop() throws WindowNotRunning {\r\n        if (!running || !frame.isVisible()) {\r\n            throw new WindowNotRunning(\"The window is not running\");\r\n        }\r\n\r\n        running = false;\r\n        frame.setVisible(false);\r\n        frame.dispose();\r\n    }\r\n}\r\n
===================================================================
diff --git a/desktop/src/main/java/net/skylix/elixor/desktop/Desktop.java b/desktop/src/main/java/net/skylix/elixor/desktop/Desktop.java
--- a/desktop/src/main/java/net/skylix/elixor/desktop/Desktop.java	
+++ b/desktop/src/main/java/net/skylix/elixor/desktop/Desktop.java	
@@ -16,6 +16,7 @@
 import java.awt.*;
 import java.awt.event.*;
 import java.security.Provider;
+import java.util.function.Consumer;
 import java.util.function.Function;
 
 public class Desktop {
@@ -60,6 +61,10 @@
         renderContent();
     }
 
+    public final void setOnResize(Consumer<Desktop> listener) {
+        settings.onResize = listener;
+    }
+
     private void renderContent() throws InvalidHexCode {
         final UXPanel titleBar = renderTitleBar();
         final UXPanel defaultRootElement = renderDefaultRootElement();
@@ -154,28 +159,12 @@
         class TitleBarButton extends UXPanel {
             public TitleBarButton(Type type) throws InvalidHexCode {
                 super(new UXPanelSettings() {{
-                    onMouseEnter = (p) -> {
-                        try {
-                            p.setColor(new ThemeColor("#ff5555"), 100);
-                        } catch (InvalidHexCode e) {
-                            e.printStackTrace();
-                        }
-                    };
-
-                    onMouseExit = (p) -> {
-                        p.setColor(new ThemeColor(0, 0, 0, 0), 300);
-                    };
-
                     dragRole = UXPanelWindowDragRole.EXCLUDE;
                     rowAlignment = UXPanelRowAlignment.CENTER;
                     columnAlignment = UXPanelColumnAlignment.CENTER;
                 }});
 
-                setSize(45, 32);
-                setRowAlignment(UXPanelRowAlignment.CENTER);
-                setColumnAlignment(UXPanelColumnAlignment.CENTER);
-
-                UXLabel label = new UXLabel("o", new UXLabelSettings() {{
+                final UXLabel label = new UXLabel("o", new UXLabelSettings() {{
                     fontSize = 13;
                     color = settings.theme.getThemeAttribute("text4");
                 }});
@@ -194,6 +183,25 @@
                     }
                 }
 
+                setOnMouseEnter((p) -> {
+                    if (type == Type.CLOSE) {
+                        p.setColor(theme.getThemeAttribute("highlight4"));
+                        label.setColor(theme.getThemeAttribute("highlightText4"));
+                    } else {
+                        p.setColor(theme.getThemeAttribute("component1"));
+                        label.setColor(theme.getThemeAttribute("highlight4"));
+                    }
+                });
+
+                setOnMouseExit((p) -> {
+                    p.setColor(new ThemeColor(0, 0, 0, 0));
+                    label.setColor(theme.getThemeAttribute("text4"));
+                });
+
+                setSize(45, 32);
+                setRowAlignment(UXPanelRowAlignment.CENTER);
+                setColumnAlignment(UXPanelColumnAlignment.CENTER);
+
                 add(label);
             }
 
@@ -204,9 +212,9 @@
             }
         }
 
-        TitleBarButton closeButton = new TitleBarButton(TitleBarButton.Type.CLOSE);
-        TitleBarButton middleButton = new TitleBarButton(TitleBarButton.Type.MIDDLE);
-        TitleBarButton minimizeButton = new TitleBarButton(TitleBarButton.Type.MINIMIZE);
+        final TitleBarButton closeButton = new TitleBarButton(TitleBarButton.Type.CLOSE);
+        final TitleBarButton middleButton = new TitleBarButton(TitleBarButton.Type.MIDDLE);
+        final TitleBarButton minimizeButton = new TitleBarButton(TitleBarButton.Type.MINIMIZE);
 
         UXPanel buttonGroup = new UXPanel(new UXPanelSettings() {{
             spacingX = 1;
